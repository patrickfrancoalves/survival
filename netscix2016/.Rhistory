"Produto Interno Bruto, \na preços correntes\n(R$ 1.000)")) %>%
mutate(PIB       =`Produto Interno Bruto, \na preÃ§os correntes\n(R$ 1.000)`,
CodIBGE   =`CÃ³digo do Município`) %>%
filter(Ano>=2016) %>% select(c("CodIBGE","Ano","PIB"))
PIBMUN2 <- PIBMUN %>% select( c("Ano","Código do Município",
"Produto Interno Bruto, \na preços correntes\n(R$ 1.000)")) %>%
mutate(PIB       =`Produto Interno Bruto, \na preÃ§os correntes\n(R$ 1.000)`,
CodIBGE   =`Código do Município`) %>%
filter(Ano>=2016) %>% select(c("CodIBGE","Ano","PIB"))
PIBMUN2 <- PIBMUN %>% select( c("Ano","Código do Município",
"Produto Interno Bruto, \na preços correntes\n(R$ 1.000)")) %>%
mutate(PIB       =`Produto Interno Bruto, \na preços correntes\n(R$ 1.000)`,
CodIBGE   =`Código do Município`) %>%
filter(Ano>=2016) %>% select(c("CodIBGE","Ano","PIB"))
names(PIBMUN2)
PIBMUN3 <- spread(PIBMUN2, Ano, PIB)
PIBMUN3 <- PIBMUN3 %>% mutate( txPIB =log(`2017`)-log(`2016`)) %>% select(c("CodIBGE","txPIB"))
PIBMUN4 <- PIBMUN %>%
mutate( Atividade  = as.numeric(as.factor(`Atividade com maior valor adicionado bruto`)),
Hierarquia = as.numeric(as.factor(`Hierarquia Urbana (principais categorias)`)),
Amazonia   = as.numeric(as.factor(`Amazônia Legal`)),
Semiarido  = as.numeric(as.factor(`SemiÃ¡rido`)),
CodIBGE = `CÃ³digo do Município`) %>% filter(Ano==2017) %>%
select(c("CodIBGE","Atividade","Hierarquia","Amazonia","Semiarido"))
PIBMUN4 <- PIBMUN %>%
mutate( Atividade  = as.numeric(as.factor(`Atividade com maior valor adicionado bruto`)),
Hierarquia = as.numeric(as.factor(`Hierarquia Urbana (principais categorias)`)),
Amazonia   = as.numeric(as.factor(`Amazônia Legal`)),
Semiarido  = as.numeric(as.factor(`Semiárido`)),
CodIBGE = `CÃ³digo do Município`) %>% filter(Ano==2017) %>%
select(c("CodIBGE","Atividade","Hierarquia","Amazonia","Semiarido"))
PIBMUN4 <- PIBMUN %>%
mutate( Atividade  = as.numeric(as.factor(`Atividade com maior valor adicionado bruto`)),
Hierarquia = as.numeric(as.factor(`Hierarquia Urbana (principais categorias)`)),
Amazonia   = as.numeric(as.factor(`Amazônia Legal`)),
Semiarido  = as.numeric(as.factor(`Semiárido`)),
CodIBGE = `Código do Município`) %>% filter(Ano==2017) %>%
select(c("CodIBGE","Atividade","Hierarquia","Amazonia","Semiarido"))
PIBMUN5 <- inner_join(PIBMUN3 , PIBMUN4 , by = c("CodIBGE"="CodIBGE"))
names(PIBMUN5)
Tipologia <- read_excel("GitHub/ml_capag/Tipologia_Cidades_2017.xlsx",
col_types = c("numeric","skip","skip","skip","text","skip"))
names(Tipologia)
library(readxl)
Impostos <- read_excel("GitHub/ml_capag/Receita Impostos Municipal.xls",
col_types = c("skip", "numeric", "skip", "skip",
"skip", "skip", "numeric", "numeric"))
Impostos <- read_excel("GitHub/ml_capag/Receita Impostos Municipal.xls",
col_types = c("skip", "numeric", "skip", "skip",
"skip", "skip", "numeric", "numeric"))
Impostos %<>% mutate( CodIBGE=`Codigo`,
txImposto =log(`2017`)-log(`2016`)) %>% select(c("CodIBGE","txImposto"))
CAPAG2 <- inner_join(CAPAG  , PIBMUN5   , by = c("CodIBGE"="CodIBGE"))
CAPAG2 <- inner_join(CAPAG  , PIBMUN5   , by = c("CodIBGE"="CodIBGE"))
CAPAG2 <- inner_join(CAPAG2 , Tipologia , by = c("CodIBGE"="Codigo_IBGE"))
CAPAG2 <- inner_join(CAPAG2 , Impostos  , by = c("CodIBGE"="CodIBGE"))
CAPAG3 <- CAPAG2 %>% mutate( lpop = log(pop) )
names(CAPAG2)
library(dplyr)
CAPAG3 <- CAPAG2 %>% mutate( lpop = log(pop) ,
Transicao = case_when( CAPAG2018=='A' & CAPAG2020=='A' ~ 1,
CAPAG2018=='A' & CAPAG2020=='B' ~ 2,
CAPAG2018=='A' & CAPAG2020=='C' ~ 3,
CAPAG2018=='B' & CAPAG2020=='A' ~ 4,
CAPAG2018=='B' & CAPAG2020=='B' ~ 5,
CAPAG2018=='B' & CAPAG2020=='C' ~ 6,
CAPAG2018=='C' & CAPAG2020=='A' ~ 7,
CAPAG2018=='C' & CAPAG2020=='B' ~ 8,
CAPAG2018=='C' & CAPAG2020=='C' ~ 9) ) %>%
select("CodIBGE","Transicao","txPIB","lpop","Atividade","Hierarquia",
"Amazonia","Semiarido","Nova_Tipologia","txImposto")
library(caret)
remove(CAPAG_Municipios2018, CAPAG_Municipios2020, joined_tibble,PIB_2010_2017)
#remove(CAPAG_Municipios2018, CAPAG_Municipios2020, joined_tibble,PIB_2010_2017)
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(mlbench)
library(randomForest)
library(impute)
install.packages("impute")
remove(CAPAG2018,CAPAG3,CAPAG2020,Impostos,PIBMUN3,PIBMUN4)
remove(Tipologia_Cidades_2017,CAPAG3,PIB_2010_2017,PIB_2017,TESTE)
library(dplyr)
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(mlbench)
library(randomForest)
library(impute)
library(ranger)
library(naivebayes)
library(rpart)
library(kernlab)
library(glmnet)
library(naivebayes)
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(mlbench)
library(randomForest)
library(ranger)
library(kernlab)
library(glmnet)
library(naivebayes)
library(rpart)
library(rpart.plot)
install.packages("impute")
?install.packages
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures", "impute"))
install.packages("devtools")
devtools::install_github("kassambara/survminer")
remove(CAPAG2018,CAPAG3,CAPAG2020,Impostos,PIBMUN3,PIBMUN4,PIBMUN)
install.packages("devtools")
#install.packages("devtools")
devtools::install_github("kassambara/survminer")
#install.packages("devtools")
devtools::install_github("kassambara/survminer",force = TRUE)
install.packages("impute")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("impute")
library("Rtsne")
library("Rtsne")
uiris <- unique(iris[, 1:5])
iristsne <- Rtsne(uiris[, 1:4])
plot(iristsne$Y, col = uiris$Species)
plot(iristsne$Y, col = uiris$Species)
View(uiris)
View(iristsne)
iristsne$Y
View(iristsne)
iristsne$Y[1]
iristsne$Y[1,]
iristsne$Y[,1]
iristsne$Y[,2]
uiris$Y1 <- iristsne$Y[,1]
uiris$Y2 <- iristsne$Y[,2]
View(uiris)
?cor
with?
as
?with
with(uiris, cor( method = c("pearson", "kendall", "spearman")))
cor(uiris, method = c("pearson", "kendall", "spearman"))
cor(uiris, method = c("pearson", "kendall", "spearman"))
View(uiris)
uiris[-c("Species")]
uiris[-Species]
uiris[-`Species`]
uiris[-uiris$Species]
uiris %>% select(Species)
uiris %>% select(-Species)
cor(uiris %>% select(-Species), method = c("pearson", "kendall", "spearman"))
cor.test( uiris %>% select(-Species) , method=c("pearson", "kendall", "spearman"))
iristsne[["origD"]]
library("Rtsne")
uiris <- unique(iris[, 1:5])
iristsne <- Rtsne(uiris[, 1:4])
plot(iristsne$Y, col = uiris$Species)
iristsne[["Y"]]
iristsne[["costs"]]
iristsne[["origD"]]
iristsne[["itercosts"]]
?Rtsne
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(mlbench)
library(randomForest)
library(ranger)
library(kernlab)
library(glmnet)
library(naivebayes)
library(rpart)
library(rpart.plot)
CAPAG2018 <- read_excel("GitHub/ml_capag/capag/CAPAG-Municipios2018.xlsx",
col_types = c("skip","numeric","text","numeric","skip",
"text","skip","text","skip","text","text"))
CAPAG2018[c("nota1","nota2","nota3","classifica_CAPAG")][is.na(CAPAG2018[c("nota1","nota2","nota3","classifica_CAPAG")])]<-'n.d.'
CAPAG2018R<- CAPAG2018 %>% mutate(CAPAG2018 =
case_when( classifica_CAPAG=='n.d.' & nota1=='A' & nota2=='A' ~ 'A',
classifica_CAPAG=='n.d.' & nota1=='A' & nota3=='A' ~ 'A',
classifica_CAPAG=='n.d.' & nota2=='A' & nota3=='A' ~ 'A',
classifica_CAPAG=='n.d.' & nota1=='B' & nota2=='B' ~ 'B',
classifica_CAPAG=='n.d.' & nota1=='B' & nota3=='B' ~ 'B',
classifica_CAPAG=='n.d.' & nota2=='B' & nota3=='B' ~ 'B',
classifica_CAPAG=='n.d.' & nota1=='C' & nota2=='C' ~ 'C',
classifica_CAPAG=='n.d.' & nota1=='C' & nota3=='C' ~ 'C',
classifica_CAPAG=='n.d.' & nota2=='C' & nota3=='C' ~ 'C',
classifica_CAPAG %in% c("A","B","C") ~ classifica_CAPAG)) %>%
select("CodIBGE","CAPAG2018","classifica_CAPAG") %>%
filter(CAPAG2018 %in% c("A","B","C"))
table(CAPAG2018R$CAPAG2018)
table(CAPAG2018R$classifica_CAPAG)
CAPAG2020 <- read_excel("GitHub/ml_capag/capag/CAPAG-Municipios2020.xlsx",
col_types = c("skip","numeric","text","numeric","skip",
"text","skip","text","skip","text","text"))
CAPAG2020[c("nota1","nota2","nota3","classifica_CAPAG")][is.na(CAPAG2020[c("nota1","nota2","nota3","classifica_CAPAG")])]<-'n.d.'
CAPAG2020R<- CAPAG2020 %>% mutate(CAPAG2020 =
case_when( classifica_CAPAG=='n.d.' & nota1=='A' & nota2=='A' ~ 'A',
classifica_CAPAG=='n.d.' & nota1=='A' & nota3=='A' ~ 'A',
classifica_CAPAG=='n.d.' & nota2=='A' & nota3=='A' ~ 'A',
classifica_CAPAG=='n.d.' & nota1=='B' & nota2=='B' ~ 'B',
classifica_CAPAG=='n.d.' & nota1=='B' & nota3=='B' ~ 'B',
classifica_CAPAG=='n.d.' & nota1=='B' & nota3=='B' ~ 'B',
classifica_CAPAG=='n.d.' & nota1=='C' & nota2=='C' ~ 'C',
classifica_CAPAG=='n.d.' & nota1=='C' & nota3=='C' ~ 'C',
classifica_CAPAG=='n.d.' & nota1=='C' & nota3=='C' ~ 'C',
classifica_CAPAG %in% c("A","B","C") ~ classifica_CAPAG)) %>%
select("CodIBGE","CAPAG2020","classifica_CAPAG","pop") %>%
filter(CAPAG2020 %in% c("A","B","C"))
table(CAPAG2020R$CAPAG2020)
install.packages("learnr")
CAPAG2020R<- CAPAG2020 %>% mutate(CAPAG2020 =
case_when( classifica_CAPAG=='n.d.' & nota1=='A' & nota2=='A' ~ 'A',
classifica_CAPAG=='n.d.' & nota1=='A' & nota3=='A' ~ 'A',
classifica_CAPAG=='n.d.' & nota2=='A' & nota3=='A' ~ 'A',
classifica_CAPAG=='n.d.' & nota1=='B' & nota2=='B' ~ 'B',
classifica_CAPAG=='n.d.' & nota1=='B' & nota3=='B' ~ 'B',
classifica_CAPAG=='n.d.' & nota1=='B' & nota3=='B' ~ 'B',
classifica_CAPAG=='n.d.' & nota1=='C' & nota2=='C' ~ 'C',
classifica_CAPAG=='n.d.' & nota1=='C' & nota3=='C' ~ 'C',
classifica_CAPAG=='n.d.' & nota1=='C' & nota3=='C' ~ 'C',
classifica_CAPAG %in% c("A","B","C") ~ classifica_CAPAG)) %>%
select("CodIBGE","CAPAG2020","classifica_CAPAG","pop") %>%
filter(CAPAG2020 %in% c("A","B","C"))
table(CAPAG2020R$CAPAG2020)
CAPAG <- inner_join(CAPAG2018R , CAPAG2020R, by = c("CodIBGE"="CodIBGE"))
names(CAPAG)
table(CAPAG$CAPAG2018,CAPAG$CAPAG2020)
prop.table(table(CAPAG$CAPAG2018,CAPAG$CAPAG2020),1)
table(CAPAG$classifica_CAPAG.x,CAPAG$classifica_CAPAG.y)
prop.table(table(CAPAG$classifica_CAPAG.x,CAPAG$classifica_CAPAG.y),1)
PIBMUN <- read_excel( "GitHub/ml_capag/PIB Municipios 2010-2017.xls",
col_types = c("numeric", "skip", "skip", "skip", "skip", "skip", "numeric",
"text", "text", "skip", "text", "numeric", "text", "numeric",
"text", "text", "numeric", "text", "text", "numeric", "text",
"text", "numeric", "text", "text", "text", "numeric", "text",
"text", "text", "text", "text", "numeric", "numeric", "numeric",
"numeric", "numeric","numeric", "numeric", "numeric", "text",
"text", "text"))
names(PIBMUN)
PIBMUN2 <- PIBMUN %>% select( c("Ano","Código do Município",
"Produto Interno Bruto, \na preços correntes\n(R$ 1.000)")) %>%
mutate(PIB       =`Produto Interno Bruto, \na preços correntes\n(R$ 1.000)`,
CodIBGE   =`Código do Município`) %>%
filter(Ano>=2016) %>% select(c("CodIBGE","Ano","PIB"))
names(PIBMUN2)
PIBMUN3 <- spread(PIBMUN2, Ano, PIB)
PIBMUN3 <- PIBMUN3 %>% mutate( txPIB =log(`2017`)-log(`2016`)) %>% select(c("CodIBGE","txPIB"))
PIBMUN4 <- PIBMUN %>%
mutate( Atividade  = as.numeric(as.factor(`Atividade com maior valor adicionado bruto`)),
Hierarquia = as.numeric(as.factor(`Hierarquia Urbana (principais categorias)`)),
Amazonia   = as.numeric(as.factor(`Amazônia Legal`)),
Semiarido  = as.numeric(as.factor(`Semiárido`)),
CodIBGE = `Código do Município`) %>% filter(Ano==2017) %>%
select(c("CodIBGE","Atividade","Hierarquia","Amazonia","Semiarido"))
PIBMUN5 <- inner_join(PIBMUN3 , PIBMUN4 , by = c("CodIBGE"="CodIBGE"))
names(PIBMUN5)
Tipologia <- read_excel("GitHub/ml_capag/Tipologia_Cidades_2017.xlsx",
col_types = c("numeric","skip","skip","skip","text","skip"))
names(Tipologia)
Impostos <- read_excel("GitHub/ml_capag/Receita Impostos Municipal.xls",
col_types = c("skip", "numeric", "skip", "skip",
"skip", "skip", "numeric", "numeric"))
Impostos %<>% mutate( CodIBGE=`Codigo`,
txImposto =log(`2017`)-log(`2016`)) %>% select(c("CodIBGE","txImposto"))
CAPAG2 <- inner_join(CAPAG  , PIBMUN5   , by = c("CodIBGE"="CodIBGE"))
CAPAG2 <- inner_join(CAPAG2 , Tipologia , by = c("CodIBGE"="Codigo_IBGE"))
CAPAG2 <- inner_join(CAPAG2 , Impostos  , by = c("CodIBGE"="CodIBGE"))
CAPAG3 <- CAPAG2 %>% mutate( lpop = log(pop) )
names(CAPAG2)
CAPAG3 <- CAPAG2 %>% mutate( lpop = log(pop) ,
Transicao = case_when( CAPAG2018=='A' & CAPAG2020=='A' ~ 1,
CAPAG2018=='A' & CAPAG2020=='B' ~ 2,
CAPAG2018=='A' & CAPAG2020=='C' ~ 3,
CAPAG2018=='B' & CAPAG2020=='A' ~ 4,
CAPAG2018=='B' & CAPAG2020=='B' ~ 5,
CAPAG2018=='B' & CAPAG2020=='C' ~ 6,
CAPAG2018=='C' & CAPAG2020=='A' ~ 7,
CAPAG2018=='C' & CAPAG2020=='B' ~ 8,
CAPAG2018=='C' & CAPAG2020=='C' ~ 9) ) %>%
select("CodIBGE","Transicao","txPIB","lpop","Atividade","Hierarquia",
"Amazonia","Semiarido","Nova_Tipologia","txImposto")
remove(CAPAG_Municipios2018, CAPAG_Municipios2020, joined_tibble,PIB_2010_2017)
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(mlbench)
library(randomForest)
library(ranger)
library(kernlab)
library(glmnet)
library(naivebayes)
library(rpart)
library(rpart.plot)
remove(CAPAG2018,CAPAG3,CAPAG2020,Impostos,PIBMUN3,PIBMUN4,PIBMUN)
View(CAPAG)
View(CAPAG2)
View(CAPAG2)
names(CAPAG2)
CAPAG3 <- CAPAG2 %>% mutate( lpop = log(pop) ,
txImposto = ifelse(txImposto < 0,0, txImposto) )
View(CAPAG3)
CAPAG2$txImposto[which(!is.finite(CAPAG3$txImposto))] <- 0
View(CAPAG2)
CAPAG3 <- CAPAG2 %>% mutate( lpop = log(pop) ,
txImposto = ifelse(txImposto < 0 , 0 , txImposto),
Transicao = case_when( CAPAG2018=='A' & CAPAG2020=='A' ~ 1,
CAPAG2018=='A' & CAPAG2020=='B' ~ 2,
CAPAG2018=='A' & CAPAG2020=='C' ~ 3,
CAPAG2018=='B' & CAPAG2020=='A' ~ 4,
CAPAG2018=='B' & CAPAG2020=='B' ~ 5,
CAPAG2018=='B' & CAPAG2020=='C' ~ 6,
CAPAG2018=='C' & CAPAG2020=='A' ~ 7,
CAPAG2018=='C' & CAPAG2020=='B' ~ 8,
CAPAG2018=='C' & CAPAG2020=='C' ~ 9) ) %>%
select("CodIBGE","Transicao","txPIB","lpop","Atividade","Hierarquia",
"Amazonia","Semiarido","Nova_Tipologia","txImposto")
View(CAPAG2018R)
remove(CAPAG2018,CAPAG3,CAPAG2020,Impostos,PIBMUN3,PIBMUN4,PIBMUN,CAPAG2018R,CAPAG2020R)
install.packages("GGally")
library(GGally)
devtools::install_github("briatte/ggnet")
library(GGally)
library(ggnet)
devtools::install_github("briatte/ggnet")
install.packages("rlang")
library(ggnet)
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
install.packages("rlang")
library(ggnet)
devtools::install_github("briatte/ggnet")
library(ggnet)
library(GGally)
#devtools::install_github("briatte/ggnet")
library(ggnet)
library(GGally)
#devtools::install_github("briatte/ggnet")
library(ggnet)
#devtools::install_github("briatte/ggnet")
library(ggnet)
library(GGally)
devtools::install_github("briatte/ggnet")
#devtools::install_github("briatte/ggnet")
library(ggnet)
install.packages("ggnet")
#install.packages("ggnet")
library(ggnet)
#install.packages("ggnet")
library(ggnet)
library(devtools)
library(ggnet)
library(network)
library(sna)
library(ggplot2)
library(GGally)
library(tidyverse)
setwd("C:/Users/patrick/OneDrive/Documentos/GitHub/survival/netscix2016")
letters<- read_csv("correspondence-data-1585.csv")
letters
View(letters)
sources <- letters %>% distinct(source) %>% rename(label = source)
sources
destinations <- letters %>% distinct(destination) %>% rename(label = destination)
destinations
nodes <- full_join(sources, destinations, by = "label")
nodes
View(nodes)
nodes <- nodes %>% rowid_to_column("id")
nodes
View(letters)
per_route <- letters %>% group_by(source, destination) %>% summarise(weight = n()) %>% ungroup()
per_route
per_route <- letters %>% group_by(source, destination) %>% summarise(weight = n()) %>% ungroup()
edges <- per_route %>% left_join(nodes, by = c("source" = "label")) %>% rename(from = id)
edges
View(edges)
edges <- edges %>% left_join(nodes, by = c("destination" = "label")) %>% rename(to = id)
edges
View(edges)
edges <- select(edges, from, to, weight)
edges
View(edges)
# Creating network objects
library(network)
routes_network <- network(edges, vertex.attr = nodes, matrix.type = "edgelist", ignore.eval = FALSE)
class(routes_network)
plot(routes_network, vertex.cex = 3)
plot(routes_network, vertex.cex = 3, mode = "circle")
detach(package:network)
rm(routes_network)
library(igraph)
routes_igraph <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
View(routes_igraph)
plot(routes_igraph, edge.arrow.size = 0.2)
plot(routes_igraph, layout = layout_with_graphopt, edge.arrow.size = 0.2)
library(tidygraph)
library(ggraph)
routes_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
routes_igraph_tidy <- as_tbl_graph(routes_igraph)
class(routes_tidy)
class(routes_igraph_tidy)
routes_tidy %>% activate(edges) %>% arrange(desc(weight))
ggraph(routes_tidy, layout = "graphopt") + geom_node_point() +
geom_edge_link(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE) +
labs(edge_width = "Letters") + theme_graph()
library(visNetwork)
library(networkD3)
visNetwork(nodes, edges)
edges <- mutate(edges, width = weight/5 + 1)
visNetwork(nodes, edges) %>% visIgraphLayout(layout = "layout_with_fr") %>% visEdges(arrows = "middle")
nodes_d3 <- mutate(nodes, id = id - 1)
edges_d3 <- mutate(edges, from = from - 1, to = to - 1)
forceNetwork(Links = edges_d3, Nodes = nodes_d3, Source = "from", Target = "to",
NodeID = "label", Group = "id", Value = "weight",
opacity = 1, fontSize = 16, zoom = TRUE)
sankeyNetwork(Links = edges_d3, Nodes = nodes_d3, Source = "from", Target = "to",
NodeID = "label", Value = "weight", fontSize = 16, unit = "Letter(s)")
network.petro.topografia <- read.csv("~/GitHub/survival/redes/network petro topografia.csv", sep=";")
View(network.petro.topografia)
petro <- read.csv("~/GitHub/survival/redes/network petro topografia.csv", sep=";")
remove(routes_igraph)
remove(sources,petro)
View(network.petro.topografia)
View(PIBMUN5)
remove(PIBMUN5,network.petro.topografia)
remove(PIBMUN2,destinations)
library(igraph)
View(edges_d3)
View(routes_tidy)
remove(edges_d3,edges,routes_tidy)
View(Tipologia)
remove(Tipologia,CAPAG,CAPAG2,nodes)
letters <- read_csv("correspondence-data-1585.csv")
letters
sources <- letters %>% distinct(source) %>% rename(label = source)
destinations <- letters %>% distinct(destination) %>% rename(label = destination)
petro <- read.csv("~/GitHub/survival/redes/network petro topografia.csv", sep=";")
View(routes_igraph_tidy)
remove(routes_igraph_tidy,sources)
View(routes_igraph_tidy)
View(petro)
names(petro)
fonte <- petro %>% distinct(ArquivoXML) %>% rename(label = source)
fonte <- petro %>% distinct(ArquivoXML) %>% rename(ArquivoXML = source)
fonte <- petro %>% distinct(ArquivoXML) %>% rename(label = ArquivoXML)
destino <- petro %>% distinct(ID_CNPQ) %>% rename(label = ID_CNPQ)
View(nodes_d3)
remove(nodes_d3,sources)
View(per_route)
remove(nodes_d3,per_route)
View(destino)
View(fonte)
nos <- full_join(fonte, destino, by = "label")
nos
nos <- nos %>% rowid_to_column("id")
nos
per_rota <- petro %>% group_by(fonte,destino) %>% summarise(weight = n()) %>% ungroup()
per_rota <- petro %>% group_by(ArquivoXML,ID_CNPQ) %>% summarise(weight = n()) %>% ungroup()
View(per_rota)
View(letters)
edges <- per_rota %>% left_join(nos, by = c("source" = "label")) %>% rename(from = id)
View(nos)
edges <- per_rota %>% left_join(nos, by = c("ArquivoXML" = "label")) %>% rename(from = id)
edges <- edges %>% left_join(nos, by = c("destination" = "label")) %>% rename(to = id)
edges <- edges %>% left_join(nos, by = c("ArquivoXML" = "label")) %>% rename(to = id)
edges <- per_rota %>% left_join(nos, by = c("ArquivoXML" = "label")) %>% rename(from = id)
edges <- edges %>% left_join(nos, by = c("ArquivoXML" = "label")) %>% rename(to = id)
edges <- select(edges, from, to, weight)
edges
View(edges)
# Creating network objects
library(network)
routes_network <- network(edges, vertex.attr = nodes, matrix.type = "edgelist", ignore.eval = FALSE)
routes_network <- network(edges, vertex.attr = nos, matrix.type = "edgelist", ignore.eval = FALSE)
class(routes_network)
plot(routes_network, vertex.cex = 3)
plot(routes_network, vertex.cex = 3, mode = "circle")
detach(package:network)
rm(routes_network)
library(igraph)
routes_igraph <- graph_from_data_frame(d = edges, vertices = nos, directed = TRUE)
plot(routes_igraph, edge.arrow.size = 0.2)
plot(routes_igraph, layout = layout_with_graphopt, edge.arrow.size = 0.2)
library(tidygraph)
library(ggraph)
routes_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
routes_tidy <- tbl_graph(nodes = nos, edges = edges, directed = TRUE)
routes_igraph_tidy <- as_tbl_graph(routes_igraph)
routes_tidy %>% activate(edges) %>% arrange(desc(weight))
ggraph(routes_tidy, layout = "graphopt") + geom_node_point() +
geom_edge_link(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE) +
labs(edge_width = "Letters") + theme_graph()
